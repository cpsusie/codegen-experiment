using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
{0}

namespace {1}
{
    partial class {2}
    {
        {3} struct {4}
        {
            // ReSharper disable once ConditionIsAlwaysTrueOrFalse
            public readonly bool IsDefault => _wrapped == default;

            public static implicit operator {4}({5} collection) =>
                new (collection);

            public static implicit operator {5}({4} stuff) => stuff._wrapped ??
                throw new InvalidOperationException("Collection has not been initialized.");
            
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public StructIEnumeratorTByVal GetEnumerator() => new(_wrapped.GetEnumerator());

            //CTOR
            {6}
                        

            private {7} {5} _wrapped;

            public struct StructIEnumeratorTByVal {12}
            {
                //Case is readonly member
                public {7} {8} Current 
                {
                    [MethodImpl(MethodImplOptions.AggressiveInlining)]
                    get => _wrapped.Current;
                }

                [MethodImpl(MethodImplOptions.AggressiveInlining)]
                public bool MoveNext() => _wrapped.MoveNext();

                internal StructIEnumeratorTByVal({9} enumerator) => _wrapped = enumerator;

                {10}

                {11}

                private {9} _wrapped;
            }
        }
    }    
}
